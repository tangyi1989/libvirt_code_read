现在让我们来猜测下，当我们 virsh -c qemu:///system（或是其他兼容的事情） 的时候发生了什么：

首先，通过socket连接到服务端，然后发送一个连接消息。

服务端会运行：

static int
remoteDispatchOpen(qemud_server *server, qemud_client *client,
                virConnectPtr conn, remote_message_header *hdr
                remote_error *rerr, remote_open_args *args, 
                void *ret ATTRIBUTE_UNUSED)
{
    name = args->name ? *args->name : NULL;
    flags = args->flags;
    if (client->readonly) flags |= VIR_CONNECT_RO;

    client->conn =  --> 如果进行连接的标志是ReadOnly的，那么此处也是ReadOnly
        flags & VIR_CONNECT_RO
        ? virConnectOpenReadOnly(name)
        : virConnectOpen(name);
}

virConnectOpen 如下定义:
这个函数将应当在连接建立之后调用，此后将得到一个Hypervisor或者Xen store的连接。

如果name参数为空，将会自动探测一个合适的默认的driver，将会试着调用每一个driver,直到成功调用，如果环境变量LIBVIRT_DEFAULT_URI被设定，将以此来探测driver.

下面简略为：
virConnectPtr virConnectOpen (const char *name)
{
    return do_open (name, NULL, 0);
}

do_open 如下：

static virConnectPtr
do_open (const char *name, virConnectAuthPtr auth, int flags)
{
    ret = virGetConnect(); --> 此处将初始化一个 virConnect 并返回 virConnectPtr

    if (name) {
        ret->uri = xmlParseURI (name);
    }

    ################# 首先是必须加载的driver, virDriver,  virInterfaceDriver
        virNetworkDriver,目前还搞不清楚 InterfaceDriver 和 NetworkDriver的区别

    for (i = 0; i < virDriverTabCount; i++) {
        if (virDriverTab[i]->no == VIR_DRV_REMOTE && --> 暂时搞不懂这个标志。
            ret->uri != NULL && ret->uri->scheme != NULL &&) {

            进行错误处理
        }

        res = virDriverTab[i]->open (ret, auth, flags); --> 
                                我猜测应该是在这个里面做的uri的比较。

        if (res == VIR_DRV_OPEN_ERROR) goto failed;
        else if (res == VIR_DRV_OPEN_SUCCESS) {
            ret->driver = virDriverTab[i];
            break;
        }
    }
    
    for (i = 0; i < virNetworkDriverTabCount; i++) {

        res = virNetworkDriverTab[i]->open (ret, auth, flags);
        if (res == VIR_DRV_OPEN_ERROR) {
            break;
        } else if (res == VIR_DRV_OPEN_SUCCESS) {
            ret->networkDriver = virNetworkDriverTab[i];
            break;
        }
    }

    for (i = 0; i < virInterfaceDriverTabCount; i++) {
        res = virInterfaceDriverTab[i]->open (ret, auth, flags);

        if (res == VIR_DRV_OPEN_ERROR) {
            break;
        } else if (res == VIR_DRV_OPEN_SUCCESS) {
            ret->interfaceDriver = virInterfaceDriverTab[i];
            break;
        }
    }

    注：如此以来便加载了3个driver,并且赋值给我们client 中的 virConnectPtr
    类型的conn.
    #########################################################################
    
    再向下会依次加载这些可选driver(和上面的driver加载方式基本相同)，此处我
    站且不去理会他们的作用，即使理会也理解不了，他们依次是:

        StorageDriver (for storage)
        DeviceMonitor (Node driver)
        SecretDriver (注释上写道Secret manipulation driver，这货是神码奇葩)
        NWFilterDriver (！这个最神奇，虚拟网络的安全全靠他了，对这个很感兴趣)

    return ret
}

我们知道自己是在使用qemu，亲们，那就直接搞她吧，我们看到在qemud 的 Driver中：
static virDriver qemuDriver = {
    .no = VIR_DRV_QEMU,
    .name = "QEMU",
    .open = qemudOpen, /* 0.2.0 */
        .
    省略其他的
        .
}

下面让我们直接来观看 qemudOpen 这个函数：
static virDrvOpenStatus qemudOpen(virConnectPtr conn,
                virConnectAuthPtr auth, int flags)
{
    if (conn->uri == NULL) {        --> 如果name为空，那就试图加载这个driver
        if (qemu_driver == NULL)
            return VIR_DRV_OPEN_DECLINED;

        conn->uri = xmlParseURI(qemu_driver->privileged ?
                                "qemu:///system" :
                                "qemu:///session");
        if (!conn->uri) {
            virReportOOMError();
            return VIR_DRV_OPEN_ERROR;
        }
    }else{  -->否则，和上面分析的一样，这里会判断uri和本driver是否符合，
        如果不符合，那就返回不符合，让上一层接着试探下一个driver。

        if (conn->uri->scheme == NULL || --> 此处进行匹配
            STRNEQ(conn->uri->scheme, "qemu"))
            return VIR_DRV_OPEN_DECLINED;

        /* Allow remote driver to deal with URIs with hostname server */
        if (conn->uri->server != NULL) --> 暂时高不清楚此处
            return VIR_DRV_OPEN_DECLINED;
        
        if (qemu_driver == NULL) { --> 下一步关注此处是什么时候初始化的。
            qemuReportError(VIR_ERR_INTERNAL_ERROR, "%s",
                            _("qemu state driver is not active"));
            return VIR_DRV_OPEN_ERROR;
        }

        if (conn->uri->path == NULL) {  --> How this happens or not happen?
                return VIR_DRV_OPEN_ERROR;
        }

        这里有个权限判断被我略去

    }
    conn->privateData = qemu_driver;

    return VIR_DRV_OPEN_SUCCESS; --> 此处返回成功，那么上层将采用此driver。

    }
}

END
