本小结作为qemu_driver初始化部分的补充：

static virCapsPtr
qemuCreateCapabilities(virCapsPtr oldcaps,
                       struct qemud_driver *driver)
{
    virCapsPtr caps;

    /* Basic host arch / guest machine capabilities */
    if (!(caps = qemuCapsInit(oldcaps))) { --> 上面的注释说的很明白。
        virReportOOMError();
        return NULL;
    }

    if (driver->allowDiskFormatProbing) {
        caps->defaultDiskDriverName = NULL;
        caps->defaultDiskDriverType = NULL;
    } else {
        caps->defaultDiskDriverName = "qemu";
        caps->defaultDiskDriverType = "raw";
    }
    qemuDomainSetPrivateDataHooks(caps);
    qemuDomainSetNamespaceHooks(caps);

    if (virGetHostUUID(caps->host.host_uuid)) {
        qemuReportError(VIR_ERR_INTERNAL_ERROR,
                         "%s", _("cannot get the host uuid"));
        goto err_exit;
    }

    /* Security driver data */
    const char *doi, *model;

    doi = virSecurityManagerGetDOI(driver->securityManager);
    model = virSecurityManagerGetModel(driver->securityManager);
    if (STRNEQ(model, "none")) {
        if (!(caps->host.secModel.model = strdup(model)))
            goto no_memory;
        if (!(caps->host.secModel.doi = strdup(doi)))
            goto no_memory;
    }

    VIR_DEBUG("Initialized caps for security driver \"%s\" with "
              "DOI \"%s\"", model, doi);

    return caps;
}

-----------------------------------------------------------------------

定义如下：

struct _virCaps {
    virCapsHost host;
    size_t nguests;
    size_t nguests_max;
    virCapsGuestPtr *guests;
    unsigned char macPrefix[VIR_MAC_PREFIX_BUFLEN];
    unsigned int emulatorRequired : 1;
    const char *defaultDiskDriverName;
    const char *defaultDiskDriverType;
    int defaultConsoleTargetType;
    void *(*privateDataAllocFunc)(void);
    void (*privateDataFreeFunc)(void *);
    int (*privateDataXMLFormat)(virBufferPtr, void *);
    int (*privateDataXMLParse)(xmlXPathContextPtr, void *);
    bool hasWideScsiBus;
    const char *defaultInitPath;

    virDomainXMLNamespace ns;
};

virCapsPtr qemuCapsInit(virCapsPtr old_caps)
{
    uname (&utsname); --> 系统调用，得到系统信息。
    caps = virCapabilitiesNew(utsname.machine, 1, 1);  --> 仅仅是申请内存。

    virCapabilitiesSetMacPrefix(caps, 
            (unsigned char[]){ 0x52, 0x54, 0x00 });  
                --> 这个函数只是把这3个字节给复制到caps->macPrefix中。

    nodeCapsInitNUMA(caps); --> 得到系统关于NUMA的支持情况，然过通过
        virCapabilitiesAddHostNUMACell此调用，把值赋给caps。

    qemuCapsInitCPU(caps, utsname.machine); --> 得到CPU的信息，
            架构, sockets, cores, threads等信息。

    virCapabilitiesAddHostMigrateTransport(caps, "tcp");
        --> 迁移只能通过tcp?

    for (i = 0 ; i < ARRAY_CARDINALITY(arch_info_hvm) ; i++)
        if (qemuCapsInitGuest(caps, old_caps,
                              utsname.machine,
                              &arch_info_hvm[i], 1) < 0) -->

                      arch_info_hvm这个数组包含了一些hvm的信息，
                      会通过检查文件和组件是否存在来判断guest应有的能力
                      此处代码在后面会再次观看。

        error_handle_code;

     /* QEMU Requires an emulator in the XML */
    virCapabilitiesSetEmulatorRequired(caps); --> 
            此处会把caps->emulatorRequired设置为1

    caps->defaultConsoleTargetType = VIR_DOMAIN_CHR_CONSOLE_TARGET_TYPE_SERIAL;

    return caps;
}
