一个主要的数据结构 qemud_server
小结论: 这些数据结构都是用于网络编程读写方面的，控制虚拟机的层面还是要看
virConnection

/* Main server state */
struct qemud_server {
    virMutex lock;      -->同下
    virCond job;        -->此结构用于并发控制。 

    int privileged;

    size_t nworkers;
    size_t nactiveworkers;
    struct qemud_worker *workers;   -->一个workder代表一个后台工作线程
    size_t nsockets;
    struct qemud_socket *sockets;   -->一个socket形成的单项链表，表示这个里面
                                        都是 listen socket.
    size_t nclients;
    size_t nclients_max;
    struct qemud_client **clients;  -->一个连接就是一个qemud_client?

    int sigread;
    int sigwrite;
    char *logDir;
    pthread_t eventThread;          --> qemuEventLoop线程ID而已。
    unsigned int hasEventThread :1;
    unsigned int quitEventThread :1;
# ifdef HAVE_AVAHI
    struct libvirtd_mdns *mdns;
# endif
# if HAVE_SASL
    char **saslUsernameWhitelist;
# endif
# if HAVE_POLKIT0
    DBusConnection *sysbus;
# endif
};


下面对另外3个数据结构进行分析 qemud_worker, qemud_socket, qemud_client：


/* Stores the per-client connection state */
struct qemud_client { --> 代表一个
    virMutex lock;

    int magic;

    int fd;     --> socket描述符
    int watch;
    unsigned int readonly :1;
    unsigned int closing :1;
    int domainEventCallbackID[VIR_DOMAIN_EVENT_ID_LAST];

    virSocketAddr addr;
    const char *addrstr;

    int type; /* qemud_sock_type */
    gnutls_session_t tlssession;    --> 有关加密的东西
    int auth;
    unsigned int handshake :1; /* If we're in progress for TLS handshake */
    
    /*此处有一些有关加密安全的域，因为有些烦人，被我去掉*/

    int nrequests;
    struct qemud_client_message *rx; --> 正在接受的消息。
    struct qemud_client_message *dx; --> 需要让工作线程处理的消息。
    struct qemud_ciient_message *tx; --> 返回给客户端的消息队列。
    struct qemud_client_filter *filters; --> 用来过滤接收到的message,不符合的
                            消息，将被丢弃掉。

    struct qemud_client_stream *streams;

    virConnectPtr conn;         --> 这个结构貌似很重要，是真正虚拟层的东西。
                                现在很好奇的是，这个是什么时候初始化的。
    int refs;

};


struct qemud_socket { --> 貌似此种类型全部被当作监听套接字了。
    char *path;

    virSocketAddr addr;
    const char *addrstr;

    int fd;
    int watch;              --> What is watch?
    int readonly;
    int type; /* qemud_sock_type */
    int auth;

    struct qemud_socket *next;
};

struct qemud_worker {
    pthread_t thread;
    unsigned int hasThread :1;
    unsigned int processingCall :1;
    unsigned int quitRequest :1;

    /* back-pointer to our server */
    struct qemud_server *server;
};


struct qemud_client_message { --> 看到这里就知道上面为什么需要3个消息队列了。
    char buffer [REMOTE_MESSAGE_MAX + REMOTE_MESSAGE_HEADER_XDR_LEN];
    unsigned int bufferLength;
    unsigned int bufferOffset;

    unsigned int async : 1;
    unsigned int streamTX : 1;

    remote_message_header hdr;

    struct qemud_client_message *next;
};

